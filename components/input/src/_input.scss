@mixin mixin-input-component() {
  padding: padding('input');
  font-size: inherit;
  color: text-color('dark');
  background-color: transparent;
  border: none;
  border-bottom: 1px solid color('gray-dark');

  &:focus {
    outline: none;
  }

  &::placeholder {
    color: color('text-dark-medium-emphasis');
  }

  &:disabled,
  &[disabled] {
    color: color('text-dark-disabled');
    border-bottom: 1px solid color('input.disabled');
  }
}

@mixin mixin-input-text-revamp($border-type, $padding) {
  padding: $padding;
  font-size: inherit;
  line-height: inherit;
  color: text-color('input.text');
  background-color: transparent;
  caret-color: color('input.active');
  #{$border-type}: 1px solid color('input.border');

  @if not($border-type == 'border-bottom') {
    border-radius: 4px;
  }
  input:not([disabled])::placeholder {
    color: color('input.placeholder');
  }
  textarea:not([disabled])::placeholder {
    color: color('input.placeholder');
  }
  input:is([disabled])::placeholder {
    color: color('input.placeholder.disabled');
  }
  textarea:is([disabled])::placeholder {
    color: color('input.placeholder.disabled');
  }

  &.filled {
    #{$border-type}: 1px solid color('input.filled');
  }
  &:hover {
    #{$border-type}: 1px solid color('input.hover');
  }
  &:focus-within {
    #{$border-type}: 1px solid color('input.focused');
  }
  &.disable {
    #{$border-type}: 1px solid color('input.disabled');
  }
  &.disable * {
    color: color('input.disabled');
  }
  &.error {
    border-color: color('input.error');
  }
  &.active,
  &:active {
    #{$border-type}: 1px solid color('input.active');
  }
  &.readOnly {
    background-color: color('input.readOnly');
  }
  &.readOnly textarea{
    background-color: color('input.readOnly');
  }
}

@mixin mixin-input-label-component {
  &.disabled {
    color: color('text-dark-disabled');
  }
}
